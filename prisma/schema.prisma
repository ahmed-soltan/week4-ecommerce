generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  emailVerified DateTime?
  firstName     String?
  lastName      String?
  phoneNumber   String?

  addresses Address[]
  accounts  Account[]
  review    Review[]
  cart      Cart[]
  wishlist  Wishlist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  userId  String  @db.ObjectId
  street  String?
  city    String?
  state   String?
  zipCode String?
  User    User    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  image String

  products Products[]
}

model Review {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId

  rating  Int
  comment String

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  cartItems CartItem[]
  total     Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity      Int
  total         Float
  sizes         String[]
  selectedImage Image

  productId String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id])

  cartId String @db.ObjectId
  cart   Cart   @relation(fields: [cartId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Products {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  price       Float
  description String
  brand       String
  inStock     Boolean
  sizes       String[]
  discount    Float?

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  images    Image[]
  reviews   Review[]
  cartItems CartItem[]

  Wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  wishlistId String?   @db.ObjectId
}

model Wishlist {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Products[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



type Image {
  color     String
  image     String
  colorCode String
}
